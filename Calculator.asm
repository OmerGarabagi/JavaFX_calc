; 322471145, 50%
; 318678620, 50%
.ORIG x4384
Calculator:     
	ST R0, R0_SAVE_CALCULATOR				; BACKUP REGISTERS
	ST R1, R1_SAVE_CALCULATOR
	ST R2, R2_SAVE_CALCULATOR
	ST R3, R3_SAVE_CALCULATOR
	ST R4, R4_SAVE_CALCULATOR
	ST R5, R5_SAVE_CALCULATOR
	ST R6, R6_SAVE_CALCULATOR
	ST R7, R7_SAVE_CALCULATOR
	LEA R0, ENTER_OP_STRING					; LOAD REQUEST INPUT STRING ON R0
	PUTS									; PRINT REQUEST INPUT STRING
	AND R0,R0,#0							; INITIALIZE R0 TO 0	
	GETC									; RECEIVE INPUT CHARACTER FROM USER 
	OUT										; PRINT CHARACTER
	AND R2,R2,#0							; INITIALIZE R2 TO 0
	AND R4,R4,#0							; INITIALIZE R4 TO 0
	ADD R2,R0,#0							; R2 WILL NOW STORE THE OP CHARACTER 
	LD R0,ENTER_ASCII						; LOAD THE ASCII VALUE OF ENTER ON R0
	OUT										; PRINT NEW LINE
	ST R2,R2_SUBSAVE						; STORE R2 (OP CHARACTER) ON A SUBSAVE
	LD R0, R0_SAVE_CALCULATOR				; LOAD R0 ORIGINAL VALUE
		CHECK_PLUS:							; CHECK IF OP IS +
			LD R3,PLUS_ASCII				; R3 NOW HAS THE ASCII VALUE OF + (IN NEGATIVE FORM)
			ADD R2,R2,R3					; R2=R2+R3
			BRz CASE_PLUS					; CASE 0 THEN GO TO CASE_PLUS (ADD)
		CHECK_MINUS:						; CHECK IF OP IS -		
			LD R2,R2_SUBSAVE				; RESTORE R2 ORIGINAL VALUE
			LD R3,MINUS_ASCII				; R3 NOW HAS THE ASCII VALUE OF - (IN NEGATIVE FORM)
			ADD R2,R2,R3					; R2=R2+R3
			BRz CASE_MINUS					; CASE 0 THEN GO TO CASE_MINUS (SUB)
		CHECK_MUL:							; CHECK IF OP IS *
			LD R2,R2_SUBSAVE				; RESTORE R2 ORIGINAL VALUE
			LD R3,MUL_ASCII					; R3 NOW HAS THE ASCII VALUE OF * (IN NEGATIVE FORM)
			ADD R2,R2,R3					; R2=R2+R3	
			BRz CASE_MUL					; CASE 0 THEN GO TO CASE_MUL (MUL)
		CHECK_DIV:							; CHECK IF OP IS /
			LD R2,R2_SUBSAVE				; RESTORE R2 ORIGINAL VALUE
			LD R3,DIV_ASCII					; R3 NOW HAS THE ASCII VALUE OF / (IN NEGATIVE FORM)
			ADD R2,R2,R3					; R2=R2+R3
			BRz CASE_DIV					; CASE 0 THEN GO TO CASE_DIV (DIV)
		CHECK_EXP:							; CHECK IF OP IS ^
			LD R2,R2_SUBSAVE				; RESTORE R2 ORIGINAL VALUE
			LD R3,EXP_ASCII					; R3 NOW HAS THE ASCII VALUE OF ^ (IN NEGATIVE FORM)
			ADD R2,R2,R3					; R2=R2+R3
			BRz CASE_EXP					; CASE 0 THEN GO TO CASE_EXP (EXP)
	
	
	CASE_PLUS:								; CASE +
		ADD R4,R0,R1						; R4 (RESULT) = R0 + R1
		LD R2,R2_SUBSAVE					; RESTORE R2 ORIGINAL VALUE
		BR PRINT							; GO TO PRINT

	CASE_MINUS:								; CASE -	
		ST R1,R1_SUBSAVE					; STORE R1 VALUE ON R1 SUBSAVE
		NOT R1,R1							; NEGATE R1
		ADD R1,R1,#1
		ADD R4,R0,R1						; R4 (RESULT) = R0 - R1
		LD R1, R1_SUBSAVE					; RESTORE R1 ORIGINAL VALUE
		LD R2,R2_SUBSAVE					; RESTORE R2 ORIGINAL VALUE
		BR PRINT							; GO TO PRINT
	
	CASE_MUL:								; CASE *
		LD R6, MUL_PTR						; LOAD MUL ADDRESS ON R6
		JSRR R6								; DO MUL
		ADD R4,R2,#0						; R4 = MUL RESOLT
		LD R2,R2_SUBSAVE					; RESTORE R2 ORIGINAL VALUE
		BR PRINT							; GO TO PRINT
		
	CASE_DIV:								; CASE /
		LD R6, DIV_PTR						; LOAD DIV ADDRESS ON R6
		JSRR R6								; DO DIV
		ADD R4,R2,#0						; R4 = DIV RESULT
		LD R2,R2_SUBSAVE					; RESTORE R2 ORIGINAL VALUE
		BR PRINT							; GO TO PRINT
		
	CASE_EXP:								; CASE ^
		LD R6, EXP_PTR						; LOAD EXP ADDRESS ON R6
		JSRR R6								; DO EXP
		ADD R4,R2,#0						; R4 = EXP RESULT
		LD R2,R2_SUBSAVE					; RESTORE R2 ORIGINAL VALUE
		BR PRINT							; GO TO PRINT
		
	PRINT:
		LD R0, R0_SAVE_CALCULATOR			; RESTORE R0 ORIGINAL VALUE
		LD R6, PRINTNUM_PTR					; LOAD PRINTNUM ADDRESS ON R6
		JSRR R6								; DO PRINTNUM WITH R0
		LD R2, R2_SUBSAVE					; RESTORE R2 ORIGINAL VALUE
		AND R0,R0,#0						; INITIALIZE R0 TO 0
		ADD R0,R2,#0						; R0 IS NOW THE OP CHARACTER
		OUT									; PRINT OP CHARACTER
		LD R0,R1_SAVE_CALCULATOR			;  LOAD ON R0 THE ORIGINAL VALUE OF R1
		JSRR R6								; DO PRINTNUM WITH R1
		LD R0, EQUAL_ASCII					; LOAD THE ASCII VALUE OF "=" ON R0
		OUT									; PRINT "="
		ADD R0,R4,#0						; R0 IS NOW THE RESULT OF THE OP
		JSRR R6								; PRINT THE RESULT
	LD R0, R0_SAVE_CALCULATOR				; RESTORE REGISTERS BACKUPS
	LD R1, R1_SAVE_CALCULATOR
	LD R2, R2_SAVE_CALCULATOR
	LD R3, R3_SAVE_CALCULATOR
	LD R4, R4_SAVE_CALCULATOR
	LD R5, R5_SAVE_CALCULATOR
	LD R6, R6_SAVE_CALCULATOR
	LD R7, R7_SAVE_CALCULATOR
RET   
	R0_SAVE_CALCULATOR .FILL #0				; REGISTERS BACKUP LABELS
	R1_SAVE_CALCULATOR .FILL #0
	R2_SAVE_CALCULATOR .FILL #0
	R3_SAVE_CALCULATOR .FILL #0
	R4_SAVE_CALCULATOR .FILL #0
	R5_SAVE_CALCULATOR .FILL #0
	R6_SAVE_CALCULATOR .FILL #0
	R7_SAVE_CALCULATOR .FILL #0
	R1_SUBSAVE .FILL #0						; R1 SUBSAVE
	R2_SUBSAVE .FILL #0						; R2 SUBSAVE
	ENTER_OP_STRING .STRINGZ "Enter an arithmetic operation: "     ; REQUEST INPUT STRING
	ENTER_ASCII .FILL #10					; ENTER ASCII VALUE (IN NEGATIVE FORM)
	PLUS_ASCII .FILL #-43					; PLUS ASCII VALUE (IN NEGATIVE FORM)
	MINUS_ASCII .FILL #-45					; MINUS ASCII VALUE (IN NEGATIVE FORM)
	MUL_ASCII .FILL #-42					; MUL ASCII VALUE (IN NEGATIVE FORM)	
	DIV_ASCII .FILL #-47					; DIV ASCII VALUE (IN NEGATIVE FORM)
	EXP_ASCII .FILL #-94					; EXP ASCII VALUE (IN NEGATIVE FORM)
	EQUAL_ASCII .FILL #61					; "=" ASCII VALUE
	MUL_PTR .FILL x4000						; MUL ADDRESS
	DIV_PTR .FILL x4064						; DIV ADDRESS
	EXP_PTR .FILL x40C8						; EXP ADDRESS
	PRINTNUM_PTR .FILL x4320				; PRINTNUM ADDRESS
	
	

.end

; 322471145, 50%
; 318678620, 50%
.ORIG X4064
Div:
	ST R0,R0_SAVE_DIV				; BACKUP REGISTERS
	ST R1,R1_SAVE_DIV
	ST R4,R4_SAVE_DIV				
	ST R5,R5_SAVE_DIV
	ST R6,R6_SAVE_DIV
	ST R7,R7_SAVE_DIV
	
	AND R2,R2,#0					; R2=0
	AND R3,R3,#0					; R3=0
	ADD R0,R0,#0
	BRz END_DIV						; CHECK IF R0=0
	ADD R1,R1,#0
	BRz DIV_ZERO					; CHECK IF THE DEVIDER(R1)=0
	ADD R1,R1,#0
	BRp DIV_POSITIVE				; CHECK IF THE DEVIDER IS POSITIVE
	ADD R1,R1,#0
	BRn DIV_NEGATIVE				; CHECK IF THE DEVIDER IS NEGATIVE

	DIV_ZERO:						; CASE DEVIDER(R1)=0
		ADD R2,R2,#-1				
		ADD R3,R3,#-1
		BR END_DIV					; END DEVISION AND RETURN (-1,-1)

	DIV_POSITIVE:					; CASE DEVIDER IS POSITIVE
		ST R0,R0_SAVE_DIV			; BACK UP THE VALUE IN R0
		NOT R1,R1
		ADD R1,R1,#1				; MAKE R1 NEGATIVE
		ADD R0,R0,#0				
		BRp CONTINUE_POS			; CHECK IF R0 IS POSITIVE
		NOT R0,R0
		ADD R0,R0,#1				; MAKE R0 POSITIVE IF IT WAS NEGATIVE
		CONTINUE_POS:				; DEVISION LOOP
			ADD R5,R0,#0			
			ADD R6,R1,#0
			ADD R5,R5,R6			; CALCULATE EACH SUBTRACT
			BRn POS_ELSE			; CHECK IF THE SUBTRACTION'S RESULT IS NEGATIVE
			ADD R0,R0,R1			
			POS_IF:
				ADD R2,R2,#1		; ADDS 1 FOR EACH SUBTRACT, IN THE END ITS THE RESULT OF THE DEVISION
				AND R5,R5,#0
				AND R6,R6,#0
				BR CONTINUE_POS		; DO THE LOOP AGAIN
			POS_ELSE:				; CASE SUBTRACTION'S RESULT IS NEGATIVE
				ADD R3,R0,#0		; CALCULATES THE REMAINDER
				LD R0,R0_SAVE_DIV	
				ADD R0,R0,#0
				BRp END_DIV			; END DIVISION IF R0 IS POSITIVE, ELSE MAKE R2 NEGATIVE
				NOT R2,R2
				ADD R2,R2,#1		; R2 IS NOW POSITIVE
				BR END_DIV			; END DIVISION

	DIV_NEGATIVE:					; CASE DEVIDER IS NEGATIVE
		ST R0,R0_SAVE_DIV			; BACK UP THE VALUES OF R0 & R1
		ST R1,R1_SAVE_DIV
		ADD R0,R0,#0
		BRp CONTINUE_NEG			; IF R0 IS POSITIVE CONTINUE, ELSE MAKE IT POSITIVE
		NOT R0,R0
		ADD R0,R0,#1
		CONTINUE_NEG:				; DEVISION LOOP
			ADD R5,R0,#0
			ADD R6,R1,#0
			ADD R5,R5,R6			; CALCULATE EACH SUBTRACT
			BRn NEG_ELSE			; CHECK IF THE SUBTRACTION'S RESULT IS NEGATIVE
			ADD R0,R0,R1
			NEG_IF:
				ADD R2,R2,#1		; ADDS 1 FOR EACH SUBTRACT, IN THE END ITS THE RESULT OF THE DEVISION
				AND R5,R5,#0
				AND R6,R6,#0
				BR CONTINUE_NEG		; DO THE LOOP AGAIN
			NEG_ELSE:				; CASE SUBTRACTION'S RESULT IS NEGATIVE
				ADD R3,R0,#0		; CALCULATES THE REMAINDER
				LD R0,R0_SAVE_DIV
				ADD R0,R0,#0
				BRn END_DIV			; END DIVISION IF R0 IS NEGATIVE, ELSE MAKE R2 POSITIVE
				NOT R2,R2
				ADD R2,R2,#1		; R2 IS NOW NEGATIVE
				BR END_DIV			; END DEVISION

	END_DIV:
		LD R0,R0_SAVE_DIV			; RESTORE REGISTERS BACKUPS
		LD R1,R1_SAVE_DIV
		LD R4,R4_SAVE_DIV			
		LD R5,R5_SAVE_DIV
		LD R6,R6_SAVE_DIV
		LD R7,R7_SAVE_DIV
RET
HALT

	R0_SAVE_DIV .fill #0			; REGISTORS BACKUP LABELS
	R1_SAVE_DIV .fill #0
	R2_SAVE_DIV .fill #0
	R3_SAVE_DIV .fill #0
	R4_SAVE_DIV .fill #0
	R5_SAVE_DIV .fill #0
	R6_SAVE_DIV .fill #0
	R7_SAVE_DIV .fill #0
	
.END